<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 生活 | 前端笔墨砚]]></title>
  <link href="http://www.atoctopus.com/blog/categories/sheng-huo/atom.xml" rel="self"/>
  <link href="http://www.atoctopus.com/"/>
  <updated>2014-04-23T08:48:47-07:00</updated>
  <id>http://www.atoctopus.com/</id>
  <author>
    <name><![CDATA[Lin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一名应届生的面试题]]></title>
    <link href="http://www.atoctopus.com/blog/2014/03/19/interview/"/>
    <updated>2014-03-19T00:57:38-07:00</updated>
    <id>http://www.atoctopus.com/blog/2014/03/19/interview</id>
    <content type="html"><![CDATA[<p>最近应聘了一家电子商务B2B公司，简单面试后是2小时笔试，下面列出面试题及答案，供大家参考学习，答案将不间断完善。</p>

<hr />

<h2>HTML部分</h2>

<p><strong> 1.使用HTML完成以下表格 </strong></p>

<p><img src="http://www.atoctopus.com/images/post/interview/html01.png" alt="HTML第一题" /></p>

<!--more-->


<p>``` html
&lt;!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>意见提交表</title>
</head>
<body>
  <form method="post" active="#">
  <table summary="某公司员工意见提交表"></p>

<pre><code>&lt;caption&gt;意见提交表&lt;/caption&gt;
&lt;tr&gt;
  &lt;th scope="row"&gt;姓名&lt;/th&gt;
  &lt;td&gt;
    &lt;input type="text" name="name"&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th scope="row"&gt;性别&lt;/th&gt;
  &lt;td&gt;
    &lt;label&gt;&lt;input id="male" type="radio" value="male" name="sex" checked="checked"&gt;男&lt;/label&gt;
    &lt;label&gt;&lt;input id="female" type="radio" value="female" name="sex"&gt;女&lt;/label&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th scope="row"&gt;类型&lt;/th&gt;
  &lt;td&gt;
    &lt;label&gt;&lt;input id="checkbox1" type="checkbox" value="checkbox1" name="checkboxAll" checked="checked"&gt;类型一&lt;/label&gt;
    &lt;label&gt;&lt;input id="checkbox2" type="checkbox" value="checkbox2" name="checkboxAll"&gt;类型二&lt;/label&gt;
    &lt;label&gt;&lt;input id="checkbox3" type="checkbox" value="checkbox3" name="checkboxAll"&gt;类型三&lt;/label&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th scope="row"&gt;部门&lt;/th&gt;
  &lt;td&gt;
    &lt;select&gt;
      &lt;option value="ue"&gt;UE部&lt;/option&gt;
      &lt;option value="ui" selected="selected"&gt;UI部&lt;/option&gt;
      &lt;option value="ue"&gt;UD部&lt;/option&gt;
    &lt;/select&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th scope="row"&gt;上传文件&lt;/th&gt;
  &lt;td&gt;
    &lt;input type="file"&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th scope="row"&gt;内容&lt;/th&gt;
  &lt;td&gt;
    &lt;textarea rows="8" cols="30"&gt;&lt;/textarea&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan="2" class="submit"&gt;
    &lt;input type="submit" value="提交"&gt;
    &lt;input type="reset" value="清除"&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</code></pre>

<p>  </table>
  </form>
</body>
</html>
```
<strong> PS： </strong></p>

<blockquote><ul>
<li><code>&lt;caption&gt;</code>标签表示表格标题</li>
<li><code>&lt;th&gt;</code>标签表示表头信息</li>
<li><code>&lt;td&gt;</code>标签表示数据</li>
<li><code>&lt;table&gt;</code>标签中的summary属性，用于描述表格内容的摘要</li>
<li><code>&lt;th&gt;</code>标签的scope属性标识为列表头或行表头</li>
<li>隐式或显式的添加<code>&lt;label&gt;</code>标签</li>
<li><code>&lt;textarea&gt;</code>标签添加rows属性和cols属性</li>
</ul>
</blockquote>

<p>在线预览：<a href="http://jsbin.com/hovuvohe/1/edit">点击这里</a></p>

<br />


<p><strong> 2.依旧是使用HTML完成以下图片 </strong></p>

<p><img src="http://www.atoctopus.com/images/post/interview/html02.png" alt="HTML第二题" /></p>

<p>``` html
&lt;!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>意见提交表</title>
</head>
<body>
  <table cellspacing="0" cellpadding="10" border="1"></p>

<pre><code>&lt;caption&gt;联系方式&lt;/caption&gt;
&lt;tr&gt;
  &lt;th rowspan="2" scope="row"&gt;test&lt;/th&gt;
  &lt;td&gt;test&lt;/td&gt;
  &lt;td&gt;test&lt;/td&gt;
  &lt;td&gt;test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;test&lt;/td&gt;
  &lt;td&gt;test&lt;/td&gt;
  &lt;td&gt;test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;test&lt;/td&gt;
  &lt;td&gt;test&lt;/td&gt;
  &lt;td&gt;test&lt;/td&gt;
  &lt;td&gt;test&lt;/td&gt;
&lt;tr&gt;
  &lt;th colspan="3" scope="row"&gt;test&lt;/th&gt;
  &lt;td&gt;test&lt;/ted&gt;
&lt;/tr&gt;
</code></pre>

<p></table>
</body>
</html>
```
在线预览：<a href="http://jsbin.com/vedapuxo/1/edit">点击这里</a></p>

<p><strong> 3.插入一张图片 </strong></p>

<pre><code>&lt;img src="example.jpg" width="200" height="100" alt="一张演示图片"&gt;
</code></pre>

<p><strong> PS： </strong></p>

<blockquote><ul>
<li>alt属性：当图片无法显示（用户禁止，屏幕阅读器，下载失败）时以文字代替图片</li>
<li>width和height属性：在网页加载时给图片预留空间，当图片无法显示时不会造成布局错乱</li>
</ul>
</blockquote>

<br />


<hr />

<h2>CSS部分</h2>

<p><strong> 1.三个div并排，左右div为固宽200px，中间自适应 </strong></p>

<p><img src="http://www.atoctopus.com/images/post/interview/css01.png" alt="CSS第一题" />
两种方法实现：浮动和定位
``` html</p>

<div id="box">
  <div class="left">...</div>
  <div class="right">...</div>
  <div class="center">...</div>
</div>


<p>```</p>

<p>``` css
/<em> 方法一：浮动 </em>/</p>

<h1>box {</h1>

<p>  border: 1px solid #000;
  overflow: hidden;
}
.left {
  float: left;
  width: 200px;
  background: red;
}
.right {
  float: right;
  width: 200px;
  background: yellow;
}
.center {
  margin: 0 200px;
  background: blue;
}</p>

<p>/<em> 方法二：定位 </em>/</p>

<h1>box {</h1>

<p>  position: relative;
  border: 1px solid #000;
  overflow: hidden;
}
.left {
  position: absolute;
  top: 0;
  left: 0;
  width: 200px;
  background: red;
}
.right {
  position: absolute;
  top: 0;
  right: 0;
  width: 200px;
  background: yellow;
}
.center {
  margin: 0 200px;
  background: blue;
}
```</p>

<p>在线预览：<a href="http://codepen.io/anon/pen/geixm/">方法一</a> <a href="http://codepen.io/anon/pen/tAleE/">方法二</a></p>

<br />


<p><strong> 2.CSS的优先级 </strong></p>

<pre><code>!important &gt; 行内 &gt; 内联 &gt; 外联 &gt; id &gt; class &gt; tag &gt; * &gt; 继承
</code></pre>

<br />


<p><strong> 3.div高初始200px，当内容超过200px时撑开容器 </strong></p>

<p>``` css
.div-test {</p>

<pre><code>min-height: 200px; /* 主流浏览器 */
height: auto !important; /* Firefox浏览器 */
height: 200px; /* IE浏览器 */
</code></pre>

<p>}
```</p>

<br />


<p><strong> 4.让div层在Flash和select之上 </strong></p>

<p>造成的原因是因为Flash和select是以窗口形式显示，窗口形式要优于非窗口形式</p>


<p>``` html</p>

<!-- 将wmode属性默认值window改为"opaque"或"transparent"实现div层在Flash之上 -->


<object>
    <embed src="http://www.atoctopus.com/example.swf" wmode="transparent"></embed>
</object>


<p>```</p>

<p>``` html</p>

<!-- 通过iframe覆盖select，div覆盖iframe的方式实现div层在select之上 -->


<p><select></p>

<pre><code>&lt;option&gt;1&lt;/option&gt;
&lt;option&gt;2&lt;/option&gt;
&lt;option&gt;3&lt;/option&gt;
</code></pre>

<p></select></p>

<div class="top">
    <iframe></iframe>
</div>


<p>```</p>

<p>``` css
.top {</p>

<pre><code>position: absolute;
top: 0;
left: 0;
width: 100px;
height: 100px;
z-index: 999px;
</code></pre>

<p>}
.top iframe {</p>

<pre><code>position: absolute;
top: 0;
left: 0;
width: 100px;
height: 100px;
z-index: -1;
</code></pre>

<p>}
```</p>

<br />


<p><strong> 5.清除浮动的方法 </strong></p>

<p>一般需要使用到浮动清除有两种情况：闭合浮动和清除浮动</p>




<p>为什么要闭合浮动？</p>




<p>因为子元素浮动使自身脱离普通流，造成父素高度坍陷。</p>


<p>``` css
/<em> 方法一：clearfix </em>/
/<em> 经典版 </em>/
.clearfix:after {
  content: &ldquo;.&rdquo;;
  display: block;
  visibility: hidden;
  height: 0;
  clear: both;
}
.clearfix {</p>

<pre><code>*zoom: 1;
</code></pre>

<p>}
/<em> 精简版 </em>/
.clearfix:after {</p>

<pre><code>content: "\200B";
display: block;
height: 0;
clear: both;
</code></pre>

<p>}
.clearfix {</p>

<pre><code>*zoom: 1;
</code></pre>

<p>}
/<em> 真精简版 </em>/
.clearfix:before, .clearfix:after {
  content: &ldquo;&rdquo;;
  display: table;
}
.clearfix:after {
  clear: both;
  overflow: hidden;
}
.clearfix {
  *zoom: 1;
}</p>

<p>/<em> 方法二：overflow </em>/
overflow: hidden | auto;</p>

<p>/<em> 方法三：额外标签 或 空标签 </em>/</p>

<div style="clear: both"></div>


<p> 或 <br clear="all"></p>

<p>/<em> 方法四：父元素浮动 </em>/
父元素添加float: left | right;</p>

<p>/<em> 方法五：display </em>/
父元素添加display: table | inline-block;
```</p>

<p>为什么要清除浮动？</p>




<p>元素浮动会影响周围元素的位置</p>


<p><code>css
float: left | right;
clear: left | right | both;
</code></p>

<br />


<p><strong> 6.px、em和百分比之间的区别 </strong></p>

<blockquote><ul>
<li>px相对于特定设备的屏幕分辨率</li>
<li>em相对于容器元素（或者父元素）的字体大小。例如浏览器默认字体16px，那么1em等于16px，14px等于0.875em</li>
<li>百分比字体将在容器元素（或者父元素）字体大小的基础上发生变化。例如：设为一个值为120%，将会使当前元素中的字体在其上层元素字体大小的基础上增加20%</li>
</ul>
</blockquote>

<br />


<hr />

<h2>JavaScript jQuery部分</h2>

<p><strong> 1.写一个原型unique方法，要求将数组中重复的项去掉 </strong></p>

<p>``` javascript
function Array() {}</p>

<p>// 方法一
Array.prototype.unique1(data) {</p>

<pre><code>var n = []; // 临时数组
for (var i = 0; i &lt; data.length; i++) {
    if (n.indexOf(data[i]) == -1) { // 循环数组，通过能否获得值的下标来判断数组是否存在
        n.push(data[i]);
    }
}
return n;
</code></pre>

<p>}</p>

<p>// 调用原型方法
var result1 = new Array();
result1.unique1([1,5,5,26,5,8,8,5,90,16]); // 返回[1, 5, 26, 8, 90, 16]</p>

<p>// 方法二
Array.prototype.unique2(data) {</p>

<pre><code>var n = {}; // 临时hash
var r = []; // 临时数组
for (var i = 0; i &lt; data.length; i++) {
    if (!n[data[i]]) { // 判断hash中是否存在这个项
        n[data[i]] = true; // 创建一个新项
        r.push(data[i]); // 将值存入数组中
    }
}
return r;
</code></pre>

<p>}</p>

<p>// 调用原型方法
var result2 = new Array();
result2.unique2([1,5,5,26,5,8,8,5,90,16]); // 返回[1, 5, 26, 8, 90, 16]</p>

<p>// 方法三
Array.prototype.unique3 = function(data) {</p>

<pre><code>var n = [data[0]];
for (var i = 1; i &lt; data.length; i++) {
    if (data.indexOf(data[i] == i) { // 通过判断数组值的下标与i的值是否相等，实现去掉重复
        n.push(data[i]);
    }
}
return n;
</code></pre>

<p>}</p>

<p>// 调用原型方法
var result3 = new Array();
result3.unique3([1,5,5,26,5,8,8,5,90,16]); // 返回[1, 5, 26, 8, 90, 16]
```</p>

<br />


<p><strong> 2.jQuery的经典写法有什么好处 </strong></p>

<p>``` javascript
(function($) {</p>

<pre><code>$(function() {
    // 代码
});
</code></pre>

<p>})(jQuery);
```
这是函数表达式的一种写法，不需要函数名立即调用并传递参数</p>

<br />


<p><strong> 3.如何解决多人开发函数命名重命的问题 </strong></p>

<blockquote><ul>
<li>开发前规范命名规则，根据不同的开发人员使用特殊的前缀，如：阿林<code>funciton aLiFunction() {}</code></li>
<li>将每个开发人员的函数封装到类中，调用的时候就调用类的函数，即使函数重名只要类名不重复</li>
</ul>
</blockquote>

<br />


<p><strong> 4.CSS、JS混合题，让元素绝对居中 </strong></p>

<p>``` css</p>

<h1>box {</h1>

<p>  position: absolute;
  width: 200px;
  height: 200px;
  background-color: #07d;
}
```</p>

<p>``` javascript
window.onload = function() {
  changePosition()
  window.onresize = function() {</p>

<pre><code>changePosition()
</code></pre>

<p>  };
  function changePosition() {</p>

<pre><code>var oBox = document.getElementById("box");
var oWidth = document.body.scrollWidth || document.documentElement.scrollWidth;
var oHeight = document.body.scrollHeight || document.documentElement.scrollHeight;
oBox.style.left = (oWidth - oBox.offsetWidth) / 2 + "px";
oBox.style.top = (oHeight - oBox.offsetHeight) / 2 + "px";
</code></pre>

<p>  }
};
```</p>

<p>在线预览：<a href="http://jsbin.com/potoxucu/2/edit">点击这里</a></p>

<br />


<p><strong> 5.使用Ajax上传一个文件 </strong></p>

<p>``` javascript
// JS方式
function Ajax() {
  var XHR = null;
  if(window.ActiveXObject) { // IE5 6是以ActiveObject的方式引入XMLHttpRequest对象的</p>

<pre><code>XHR = new ActiveXObject("Microsoft.XMLHTTP");
</code></pre>

<p>  }
  else if(window.XMLHttpRequest) { // 除IE5 6以外的浏览器</p>

<pre><code>XHR = new XMLHttpRequest(); // XMLHttpRequest是window的子对象，实例化一个XMLHttpRequest对象
</code></pre>

<p>  }
  XHR.onreadystatechange = function() {</p>

<pre><code>if(XHR.readyState == 4 &amp;&amp; XHR.status == 200) {
  alert("Done!");
}
</code></pre>

<p>  }
  XML.open(&ldquo;POST&rdquo;, &ldquo;test.txt&rdquo;, true);
  XML.send();
}</p>

<p>// jQuery方法</p>

<p>```</p>

<br />


<p><strong> 6.JS中如何对一个对象进行深度clone </strong></p>

<p>``` javascript
// 浅clone
var obj = {</p>

<pre><code>a : 10
</code></pre>

<p>};
function shallowCopy(obj) {</p>

<pre><code>var newObj = {};
for(var attr in obj) {
    newObj[attr] = obj[attr];
}
return newObj;
</code></pre>

<p>}
var obj2 = shallowCopy(obj);
obj2.a = 20;
alert(obj); // obj2.a=20没影响到obj.a中的值，返回10</p>

<p>// 深clone
var obj = {</p>

<pre><code>a : {
    b : 10
}
</code></pre>

<p>};
function deepCopy(obj) {</p>

<pre><code>if(typeof obj != "object") {
    return obj;
}
var newObj = {};
for(var attr in obj) {
    newObj[attr] = deepCopy(obj[attr]);
}
return newObj;
</code></pre>

<p>}
var obj2 = deepCopy(obj);
obj2.a.b = 20;
alert(obj.a.b); // 10
```</p>

<br />


<hr />

<h2>其他</h2>

<p><strong> 1.前端应该使用MVC实现吗？说说你的看法和实现的思想 </strong></p>

<br />


<p><strong> 2.你如何让结构样式分离，你的哪些优化方法，如何解决兼容性问题？ </strong></p>

<p>结构样式分离：</p>

<ol>
<li>JS代码只出现在.js文件中</li>
<li>在HTML代码中不出现onload、onclick，所有行为都使用绑定的方式来实现</li>
<li>只关注行为，不能在JS中定义CSS样式</li>
</ol>


<p>优化方法：</p>

<p>页面级：
出门右转<a href="/blog/2014/03/19/wangzhanyouhua/">《高性能网站建设指南》</a></p>

<p>代码级：
1.  避免全局变量
2.  减少DOM操作
3.  减少重绘页面</p>

<p>解决兼容性：
``` css
/<em>
 * 过滤
 * 条件注释法
 </em>/</p>

<!--[if lt IE 9]>
    <link rel="stylesheet" href="test.css"> 
<![endif]-->


<p>/<em>
 * Hack方法
 * 子选择器 IE6以更低版本不支持
 </em>/
html>body {</p>

<pre><code>font-size: 12px;
</code></pre>

<p>}</p>

<p>/<em> 属性选择器 IE6以更低版本不支持 </em>/
div[id=&ldquo;box&rdquo;] {</p>

<pre><code>background-color: #fff;
</code></pre>

<p>}</p>

<p>/<em> 星号html IE6及更低版本支持 </em>/
* html p { // IE6</p>

<pre><code>color: blue;
</code></pre>

<p>}
*+html p { // IE7</p>

<pre><code>color: yellow;
</code></pre>

<p>}</p>

<p>/<em> !important </em>/
.test {</p>

<pre><code>background-color: yellow !important; // IE6及更低版本不支持!important，因此第二条生效
background-color: red;
</code></pre>

<p>}</p>

<p>/<em> 下划线 </em>/
.test {</p>

<pre><code>background-color: yellow;
_background-color: red; // IE6及更低版本忽略下划线，因此覆盖第一条
</code></pre>

<p>}</p>

<p>/<em> 属性星号 </em>/
.test {</p>

<pre><code>*color: red; // IE6、7都会生效
</code></pre>

<p>}
```</p>

<br />


<p><strong> 3.你对HTML5和CSS3的了解 </strong></p>

<p>HTML5新增：</p>

<ol>
<li>语义化标签：<code>&lt;header&gt;，&lt;nav&gt;，&lt;section&gt;，&lt;aside&gt;，&lt;footer&gt;，&lt;article&gt;，&lt;hgroup&gt;，&lt;figure&gt;，&lt;time&gt;</code>等等</li>
<li>媒体播放<code>&lt;video&gt;，&lt;audio&gt;</code></li>
<li>二维绘图<code>&lt;canvas&gt;</code></li>
<li>表单属性和类型<code>required</code>，<code>placeholder</code>，<code>autofocus</code>，<code>autocomplete</code></li>
<li>API<code>拖放，Web存储，应用缓存，地理定位，Web Worker，Web Socket，SVG</code></li>
</ol>


<p>CSS3新增：</p>

<ol>
<li>边框<code>border-radius</code>，<code>box-shadow</code></li>
<li>背景<code>background-size</code>，<code>background-origin</code></li>
<li>文本效果<code>text-shadow</code>，<code>word-wrap</code></li>
<li>字体<code>@font-face</code></li>
<li>2D，3D转换<code>tansfrom</code></li>
<li>过渡<code>tansition</code></li>
<li>动画<code>@keyframes</code></li>
<li>多列<code>column-count</code></li>
</ol>


<br />


<p><strong> 4.列出你知道的CSS框架和JS框架，并说明其有缺点 </strong></p>

<p>CSS框架</p>


<blockquote><ul>
<li><code>jQuery UI</code></li>
<li><code>BootStrap</code></li>
</ul>
</blockquote>

<p>JS框架</p>


<blockquote><ul>
<li><code>Prototype</code></li>
<li>优：对JS的内置对象（例如String对象、Array对象等）做了大量的扩展。</li>
<li>缺：成型年代早，整体上面向对象的编程思想不到位。</li>
<li><code>Dojo</code></li>
<li>优：提供了其他JS库所没有的功能。例如离线存储API、生成图标的组件、基于SVG/VML的矢量图形库和Comet支持等。非常适合企业级应用的JS库。</li>
<li>缺：学习曲线陡，文档不齐全，API不稳定。</li>
<li><code>YUI</code></li>
<li>优：YUI封装了一系列比较丰富的功能，例如DOM操作和Ajax应用等，同时还包括了几个核心的CSS文件，文档极其完备，代码编写非常规范。</li>
<li><code>Ext JS</code></li>
<li>优：YUI的一个扩展，主要用于前端界面，Ext可以用来开发富有华丽外观的富客户端应用。</li>
<li>缺：Ext侧重于界面，本身比较臃肿，需要付费。</li>
<li><code>MooTools</code></li>
<li>优：轻量、简洁、模块化和面向对象。语法与prototype相差无几，提供了强大的功能、更好的扩展性和兼容性。模块化思想优秀，语法简洁直观，文档完善。</li>
<li><code>jQuery</code></li>
<li>轻量级</li>
<li>强大的DOM选择器</li>
<li>出色的DOM操作的封装</li>
<li>可靠的事件处理机制</li>
<li>完善的Ajax</li>
<li>不污染顶级变量</li>
<li>出色的浏览器兼容</li>
<li>链式操作方式</li>
<li>隐式迭代</li>
<li>行为层与结构层分离</li>
<li>丰富的插件支持</li>
<li>完善的文档</li>
<li>开源</li>
</ul>
</blockquote>

<br />

]]></content>
  </entry>
  
</feed>
